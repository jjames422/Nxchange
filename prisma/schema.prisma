generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  passwordHash      String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  fiatBalance       Float              @default(0.0)
  cryptoBalances    Json               @default("{}")
  fiatTransactions  FiatTransaction[]
  cryptoTransactions CryptoTransaction[]
  wallets           Wallet[]
  swiftTransfers    SWIFTTransfer[]
  bankAccounts      BankAccount[]
  name              String?
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
}

model Wallet {
  id               Int      @id @default(autoincrement())
  userId           Int?
  user             User?    @relation(fields: [userId], references: [id])
  type             String
  network          String
  address          String
  balance          Float    @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  privateKeyId     Int      @unique
  privateKey       PrivateKey @relation(fields: [privateKeyId], references: [id])
  symbol           String
  transactions     Transaction[] 
  isExchangeWallet Boolean  @default(false)  // Field to identify exchange wallets

  @@unique([userId, type, network, symbol])
}

model ExchangeWallet {
  id         Int      @id @default(autoincrement())
  type       String   // e.g., BTC, ETH, LTC, MATIC
  network    String   // e.g., ethereum, bitcoin
  address    String
  privateKey String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model PrivateKey {
  id        Int       @id @default(autoincrement())
  key       String    @unique
  wallet    Wallet?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Transaction {
  id              Int                @id @default(autoincrement())
  walletId        Int
  type            String
  amount          Float
  currency        String
  status          String
  referenceCode   String?
  createdAt       DateTime           @default(now())
  wallet          Wallet             @relation(fields: [walletId], references: [id])
}

model FiatTransaction {
  id              Int                @id @default(autoincrement())
  userId          Int
  amount          Float
  currency        String
  type            String
  status          String
  referenceCode   String?
  transactionReferenceNumber String?
  bicSender       String?
  senderName      String?
  transactionDate DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  user            User               @relation(fields: [userId], references: [id])
}

model CryptoTransaction {
  id              Int                @id @default(autoincrement())
  userId          Int
  amount          Float
  currency        String
  type            String
  status          String
  gasFee          Float
  exchangeFee     Float
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  user            User               @relation(fields: [userId], references: [id])
}

model SWIFTTransfer {
  id              Int                @id @default(autoincrement())
  userId          Int
  amount          Float
  currency        String
  status          String
  referenceCode   String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  user            User               @relation(fields: [userId], references: [id])
}

model BankAccount {
  id              Int                @id @default(autoincrement())
  userId          Int
  bankName        String
  accountNumber   String
  routingNumber   String
  swiftCode       String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @default(now())
  user            User               @relation(fields: [userId], references: [id])
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  user               User      @relation(fields: [userId], references: [id])
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())

  @@unique([provider, providerAccountId])
}

model Session {
  id                 Int       @id @default(autoincrement())
  sessionToken       String    @unique
  userId             Int
  user               User      @relation(fields: [userId], references: [id])
  expires            DateTime  @map("expires")

  @@map(name: "Session")
}

model VerificationToken {
  id                 Int       @id @default(autoincrement())
  identifier         String
  token              String    @unique
  expires            DateTime

  @@map(name: "VerificationToken")
}
